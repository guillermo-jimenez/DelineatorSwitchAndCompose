{
    "root_directory": "~/DADES/DADES/Delineator/Databases/",
    "save_directory": "~/DADES/DADES/Delineator/TrainedModels/",
    "device": "cuda",
    "seed": 123456,
    "resume": false,
    "input_shape": 1024,
    "iterator": "tqdm.tqdm",
    "epochs": 100,
    "sampler": {
        "shuffle": true
    },
    "dataset": {
        "scaling_metric": "sak.signal.abs_max",
        "length": 65536,
        "N": 2048
    },
    "loader": {
        "batch_size": 64,
        "num_workers": 4,
        "pin_memory": true
    },
    "optimizer": {
        "class": "torch.optim.Adam",
        "arguments": {
            "lr": 0.001
        }
    },
    "scheduler": {
        "class": "torch.optim.lr_scheduler.ReduceLROnPlateau",
        "arguments": {
            "factor": 0.1,
            "patience": 20
        }
    },
    "loss": {
        "class": "sak.torch.nn.CompoundLoss",
        "arguments": {
            "operations": [
                {
                    "class": "sak.torch.Mapper",
                    "arguments": {
                        "input_mappings": [["outputs", "sigmoid"],["inputs", "y"]],
                        "operation": {
                            "class": "sak.torch.nn.DiceLoss",
                            "arguments": {
                                "weight": [1.5,1.0,1.0]
                            }
                        }
                    }
                },
                {
                    "class": "sak.torch.Mapper",
                    "arguments": {
                        "input_mappings": [["outputs", "sigmoid"],["inputs", "y"]],
                        "operation": {
                            "class": "sak.torch.nn.BoundDiceLoss1d",
                            "arguments": {
                                "channels": 3,
                                "weight": [1.5,1.0,1.0]
                            }
                        }
                    }
                },
                {
                    "class": "sak.torch.Mapper",
                    "arguments": {
                        "input_mappings": [["outputs", "sigmoid"],["inputs", "y"]],
                        "operation": {
                            "class": "sak.torch.nn.F1InstanceLoss1d",
                            "arguments": {
                                "channels": 3,
                                "weight": [1.25,1.0,1.0]
                            }
                        }
                    }
                },
                {
                    "class": "sak.torch.Mapper",
                    "arguments": {
                        "input_mappings": [["outputs", "sigmoid"],["inputs", "y"]],
                        "operation": {
                            "class": "sak.torch.nn.ConstantLoss",
                            "arguments": {
                                "value": 2.5
                            }
                        }
                    }
                }
            ],
            "weight": [
                1.0,
                0.0,
                0.0,
                0.0
            ]
        }
    },
    "model": {
        "class": "sak.torch.nn.ModelGraph",
        "arguments": {
            "functions": [
                {
                    "name": "forward",
                    "inputs": [
                        "x"
                    ],
                    "outputs": [
                        "sigmoid"
                    ]
                }
            ],
            "edges": [
                ["x", "encoder_lvl1"],
                ["encoder_lvl1", "encoder_avgpool1"],
                ["encoder_avgpool1", "encoder_lvl2"],
                ["encoder_lvl2", "encoder_avgpool2"],
                ["encoder_avgpool2", "encoder_lvl3"],
                ["encoder_lvl3", "decoder_upsample3"],
                ["decoder_upsample3", ["decoder_upsample3","encoder_lvl2"]],
                ["encoder_lvl2", ["decoder_upsample3","encoder_lvl2"]],
                [["decoder_upsample3","encoder_lvl2"],"decoder_concat2"],
                ["decoder_concat2", "decoder_lvl2"],
                ["decoder_lvl2", "decoder_upsample2"],
                ["decoder_upsample2", ["decoder_upsample2","encoder_lvl1"]],
                ["encoder_lvl1", ["decoder_upsample2","encoder_lvl1"]],
                [["decoder_upsample2","encoder_lvl1"],"decoder_concat1"],
                ["decoder_concat1", "decoder_lvl1"],
                ["decoder_lvl1", "sigmoid"]
            ],
            "nodes": [
                {
                    "id": "encoder_lvl1",
                    "class": "sak.torch.nn.CNN",
                    "arguments": {
                        "operation": {
                            "class": "sak.torch.nn.Conv1d"
                        },
                        "channels": [
                            1,
                            4
                        ],
                        "regularization": [
                            {
                                "class": "torch.nn.LeakyReLU"
                            },
                            {
                                "class": "torch.nn.BatchNorm1d",
                                "arguments": {
                                    "num_features": "update"
                                }
                            },
                            {
                                "class": "sak.torch.nn.Dropout1d",
                                "arguments": {
                                    "p": 0.25
                                }
                            }
                        ]
                    }
                },
                {
                    "id": "encoder_avgpool1",
                    "class": "torch.nn.AvgPool1d",
                    "arguments": {
                        "kernel_size": 2
                    }
                },
                {
                    "id": "encoder_lvl2",
                    "class": "sak.torch.nn.CNN",
                    "arguments": {
                        "operation": {
                            "class": "sak.torch.nn.Conv1d"
                        },
                        "channels": [
                            4,
                            8
                        ],
                        "regularization": [
                            {
                                "class": "torch.nn.LeakyReLU"
                            },
                            {
                                "class": "torch.nn.BatchNorm1d",
                                "arguments": {
                                    "num_features": "update"
                                }
                            },
                            {
                                "class": "sak.torch.nn.Dropout1d",
                                "arguments": {
                                    "p": 0.25
                                }
                            }
                        ]
                    }
                },
                {
                    "id": "encoder_avgpool2",
                    "class": "torch.nn.AvgPool1d",
                    "arguments": {
                        "kernel_size": 2
                    }
                },
                {
                    "id": "encoder_lvl3",
                    "class": "sak.torch.nn.CNN",
                    "arguments": {
                        "operation": {
                            "class": "sak.torch.nn.Conv1d"
                        },
                        "channels": [
                            8,
                            16
                        ],
                        "regularization": [
                            {
                                "class": "torch.nn.LeakyReLU"
                            },
                            {
                                "class": "torch.nn.BatchNorm1d",
                                "arguments": {
                                    "num_features": "update"
                                }
                            },
                            {
                                "class": "sak.torch.nn.Dropout1d",
                                "arguments": {
                                    "p": 0.25
                                }
                            }
                        ]
                    }
                },
                {
                    "id": "decoder_upsample3",
                    "class": "torch.nn.Upsample",
                    "arguments": {
                        "scale_factor": 2
                    }
                },
                {
                    "id": "decoder_concat2",
                    "class": "sak.torch.nn.Concatenate"
                },
                {
                    "id": "decoder_lvl2",
                    "class": "sak.torch.nn.CNN",
                    "arguments": {
                        "operation": {
                            "class": "sak.torch.nn.Conv1d"
                        },
                        "channels": [
                            24,
                            8
                        ],
                        "regularization": [
                            {
                                "class": "torch.nn.LeakyReLU"
                            },
                            {
                                "class": "torch.nn.BatchNorm1d",
                                "arguments": {
                                    "num_features": "update"
                                }
                            },
                            {
                                "class": "sak.torch.nn.Dropout1d",
                                "arguments": {
                                    "p": 0.25
                                }
                            }
                        ]
                    }
                },
                {
                    "id": "decoder_upsample2",
                    "class": "torch.nn.Upsample",
                    "arguments": {
                        "scale_factor": 2
                    }
                },
                {
                    "id": "decoder_concat1",
                    "class": "sak.torch.nn.Concatenate"
                },
                {
                    "id": "decoder_lvl1",
                    "class": "sak.torch.nn.CNN",
                    "arguments": {
                        "operation": {
                            "class": "sak.torch.nn.Conv1d"
                        },
                        "channels": [
                            12,
                            4,
                            3
                        ],
                        "regularization": [
                            {
                                "class": "torch.nn.LeakyReLU"
                            },
                            {
                                "class": "torch.nn.BatchNorm1d",
                                "arguments": {
                                    "num_features": "update"
                                }
                            },
                            {
                                "class": "sak.torch.nn.Dropout1d",
                                "arguments": {
                                    "p": 0.25
                                }
                            }
                        ],
                        "regularize_extrema": false
                    }
                },
                {
                    "id": "sigmoid",
                    "class": "torch.nn.Sigmoid"
                }
            ]
        }
    }
}