{
    "root_directory": "~/DADES/DADES/EjectionFraction/Databases/",
    "save_directory": "~/DADES/DADES/EjectionFraction/TrainedModels/",
    "device": "cuda",
    "seed": 123456,
    "resume": false,
    "input_shape": 1024,
    "iterator": "tqdm.tqdm",
    "epochs": 100,
    "sampler": {
        "shuffle": true
    },
    "loader": {
        "batch_size": 64,
        "num_workers": 0,
        "pin_memory": true
    },
    "optimizer": {
        "class": "torch.optim.Adam",
        "arguments": {
            "lr": 0.001
        }
    },
    "scheduler": {
        "class": "torch.optim.lr_scheduler.ReduceLROnPlateau",
        "arguments": {
            "factor": 0.1,
            "patience": 100
        }
    },
    "augmentation": {
        "class": "sak.torch.Mapper",
        "arguments": {
            "json": {
                "input_mappings": [
                    ["inputs","x"]
                ],
                "output_mappings": [
                    ["inputs","x"]
                ],
                "class": "sak.torch.data.augmentation.AugmentationComposer",
                "arguments": {
                    "class": "torchvision.transforms.RandomChoice",
                    "transforms": {
                        "sak.torch.signal.data.augmentation.RandomSpikes": [
                            0.1
                        ],
                        "sak.torch.data.augmentation.AdditiveWhiteGaussianNoise": [
                            20,
                            0.01
                        ],
                        "sak.torch.data.augmentation.PowerlineNoise": [
                            20,
                            500,
                            50.0
                        ],
                        "sak.torch.data.augmentation.BaselineNoise": [
                            -5,
                            500,
                            0.5
                        ],
                        "sak.torch.data.augmentation.ChangeAmplitude": [
                            0.01
                        ],
                        "sak.torch.data.augmentation.SegmentationErrors": [
                            10
                        ]
                    }
                }
            }
        }
    },
    "loss": {
        "class": "sak.torch.Mapper",
        "arguments": {
            "json": {
                "input_mappings": [
                    ["outputs","sigmoid"],
                    ["inputs","y"]
                ],
                "class": "sak.torch.nn.DiceLoss"
            }
        }
    },
    "model": {
        "type": "graph",
        "functions": [
            {
                "name": "forward",
                "inputs": [
                    "x"
                ],
                "outputs": [
                    "sigmoid"
                ]
            }
        ],
        "edges": [
            ["x", "encoder_lvl1"],
            ["encoder_lvl1", "encoder_avgpool1"],
            ["encoder_avgpool1", "encoder_lvl2"],
            ["encoder_lvl2", "encoder_avgpool2"],
            ["encoder_avgpool2", "encoder_lvl3"],
            ["encoder_lvl3", "decoder_upsample3"],
            ["decoder_upsample3", ["decoder_upsample3","encoder_lvl2"]],
            ["encoder_lvl2", ["decoder_upsample3","encoder_lvl2"]],
            [["decoder_upsample3","encoder_lvl2"],"decoder_concat2"],
            ["decoder_concat2", "decoder_lvl2"],
            ["decoder_lvl2", "decoder_upsample2"],
            ["decoder_upsample2", ["decoder_upsample2","encoder_lvl1"]],
            ["encoder_lvl1", ["decoder_upsample2","encoder_lvl1"]],
            [["decoder_upsample2","encoder_lvl1"],"decoder_concat1"],
            ["decoder_concat1", "decoder_lvl1"],
            ["decoder_lvl1", "sigmoid"]
        ],
        "nodes": [
            {
                "id": "encoder_lvl1",
                "class": "sak.torch.nn.CNN",
                "arguments": {
                    "operation": {
                        "class": "sak.torch.nn.SeparableConv1d"
                    },
                    "channels": [
                        1,
                        16,
                        16
                    ],
                    "regularization": [
                        {
                            "class": "torch.nn.LeakyReLU"
                        },
                        {
                            "class": "torch.nn.BatchNorm1d",
                            "arguments": {
                                "num_features": "update"
                            }
                        },
                        {
                            "class": "sak.torch.nn.Dropout1d",
                            "arguments": {
                                "p": 0.25
                            }
                        }
                    ]
                }
            },
            {
                "id": "encoder_avgpool1",
                "class": "torch.nn.AvgPool1d",
                "arguments": {
                    "kernel_size": 2
                }
            },
            {
                "id": "encoder_lvl2",
                "class": "sak.torch.nn.CNN",
                "arguments": {
                    "operation": {
                        "class": "sak.torch.nn.SeparableConv1d"
                    },
                    "channels": [
                        16,
                        32,
                        32
                    ],
                    "regularization": [
                        {
                            "class": "torch.nn.LeakyReLU"
                        },
                        {
                            "class": "torch.nn.BatchNorm1d",
                            "arguments": {
                                "num_features": "update"
                            }
                        },
                        {
                            "class": "sak.torch.nn.Dropout1d",
                            "arguments": {
                                "p": 0.25
                            }
                        }
                    ]
                }
            },
            {
                "id": "encoder_avgpool2",
                "class": "torch.nn.AvgPool1d",
                "arguments": {
                    "kernel_size": 2
                }
            },
            {
                "id": "encoder_lvl3",
                "class": "sak.torch.nn.CNN",
                "arguments": {
                    "operation": {
                        "class": "sak.torch.nn.SeparableConv1d"
                    },
                    "channels": [
                        32,
                        64,
                        64
                    ],
                    "regularization": [
                        {
                            "class": "torch.nn.LeakyReLU"
                        },
                        {
                            "class": "torch.nn.BatchNorm1d",
                            "arguments": {
                                "num_features": "update"
                            }
                        },
                        {
                            "class": "sak.torch.nn.Dropout1d",
                            "arguments": {
                                "p": 0.25
                            }
                        }
                    ]
                }
            },
            {
                "id": "decoder_upsample3",
                "class": "torch.nn.Upsample",
                "arguments": {
                    "scale_factor": 2
                }
            },
            {
                "id": "decoder_concat2",
                "class": "sak.torch.nn.Concatenate"
            },
            {
                "id": "decoder_lvl2",
                "class": "sak.torch.nn.CNN",
                "arguments": {
                    "operation": {
                        "class": "sak.torch.nn.SeparableConv1d"
                    },
                    "channels": [
                        96,
                        32,
                        32
                    ],
                    "regularization": [
                        {
                            "class": "torch.nn.LeakyReLU"
                        },
                        {
                            "class": "torch.nn.BatchNorm1d",
                            "arguments": {
                                "num_features": "update"
                            }
                        },
                        {
                            "class": "sak.torch.nn.Dropout1d",
                            "arguments": {
                                "p": 0.25
                            }
                        }
                    ]
                }
            },
            {
                "id": "decoder_upsample2",
                "class": "torch.nn.Upsample",
                "arguments": {
                    "scale_factor": 2
                }
            },
            {
                "id": "decoder_concat1",
                "class": "sak.torch.nn.Concatenate"
            },
            {
                "id": "decoder_lvl1",
                "class": "sak.torch.nn.CNN",
                "arguments": {
                    "operation": {
                        "class": "sak.torch.nn.SeparableConv1d"
                    },
                    "channels": [
                        48,
                        16,
                        16,
                        3
                    ],
                    "regularization": [
                        {
                            "class": "torch.nn.LeakyReLU"
                        },
                        {
                            "class": "torch.nn.BatchNorm1d",
                            "arguments": {
                                "num_features": "update"
                            }
                        },
                        {
                            "class": "sak.torch.nn.Dropout1d",
                            "arguments": {
                                "p": 0.25
                            }
                        }
                    ],
                    "regularize_extrema": false
                }
            },
            {
                "id": "sigmoid",
                "class": "torch.nn.Sigmoid"
            }
        ]
    }
}